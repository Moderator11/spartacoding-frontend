# workflow 이름
name: ci

# 워크플로우를 실행시키는 event
on: [push]

jobs:
  # 의존성 설치
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Restore node modules from cache
        id: restore-node-modules
        uses: actions/cache@v3
        with:
          path: week-5/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('week-5/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node
  
      - name: Install dependencies
        if: steps.restore-node-modules.outputs.cache-hit != 'true'
        run: npm install
        working-directory: week-5

  # lint 확인 및 수정
  lint:
      runs-on: ubuntu-latest
      needs: install-dependencies
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '18'

        - name: Restore node modules from cache
          id: restore-node-modules
          uses: actions/cache@v3
          with:
            path: week-5/node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('week-5/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-

        - name: Install dependencies (if not cached)
          if: steps.restore-node-modules.outputs.cache-hit != 'true'
          run: npm install
          working-directory: week-5

        - name: Run lint
          run: npm run lint
          working-directory: week-5

  # React Build
  build:
    runs-on: ubuntu-latest
    needs: [install-dependencies]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Restore node modules from cache
        id: restore-node-modules
        uses: actions/cache@v3
        with:
          path: week-5/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('week-5/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if not cached)
        if: steps.restore-node-modules.outputs.cache-hit != 'true'
        run: npm install
        working-directory: week-5

      - name: Run Build
        run: npm run build
        working-directory: week-5
          
  # lighthouse
  lighthouse:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Restore node modules from cache
        id: restore-node-modules
        uses: actions/cache@v3
        with:
          path: week-5/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('week-5/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (if not cached)
        if: steps.restore-node-modules.outputs.cache-hit != 'true'
        run: npm install
        working-directory: week-5   

      - name: Run Build
        run: npm run build
        working-directory: week-5

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.14.x
          lhci autorun
        working-directory: week-5
      
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            // 본인의 환경에 맞게 설정해주세요
            const results = JSON.parse(fs.readFileSync("/{Github Actions runner directory}/lhci_reports/manifest.json"));
            // comment를 담을 변수 입니다.
            let comments = "";

            results.forEach((result) => {
              const { summary, jsonPath } = result;
              const details = JSON.parse(fs.readFileSync(jsonPath));
              const { audits } = details;

              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );

              // 점수가 색상으로 구분되는 방식 (https://web.dev/performance-scoring/#color-coding)
              const score = (res) => (res >= 90 ? "🟢" : res >= 50 ? "🟠" : "🔴");

              const comment = [
                `⚡️ Lighthouse report!`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
              ].join("\n");

              const detail = [
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(audits["first-contentful-paint"].score * 100)} First Contentful Paint | ${audits["first-contentful-paint"].displayValue} |`,
                // 여기에 필요한 다른 세부 항목들을 추가하세요
              ].join("\n");

              comments += comment + "\n" + detail + "\n";
            });

            // comments 변수의 값을 다음 job으로 넘겨줍니다.
            core.setOutput('comments', comments);

      - name: comment PR
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.format_lighthouse_score.outputs.comments}}